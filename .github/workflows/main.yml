name: Release

on:
    pull_request:
        branches: ['**']
    workflow_dispatch:
        inputs:
            version:
                description: 'version'
                required: false # Make this optional
                default: ''
            release_stage:
                type: choice
                description: 'release stage'
                required: True
                default: 'gold'
                options:
                    - alpha
                    - beta
                    - rc
                    - gold

permissions:
    contents: write

jobs:
    Build:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.extract_version.outputs.version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Extract version from __init__.py
              id: extract_version
              run: |
                  VERSION=$(python <<EOF
                  import re

                  with open("__init__.py", "r", encoding="utf-8") as f:
                      content = f.read()

                  # Try matching either `"version": (x, y, z)` or `version = (x, y, z)`
                  pattern = re.compile(r'version"\s*:\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)|version\s*=\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)')
                  match = pattern.search(content)

                  if not match:
                      # If no match, print nothing; shell script will handle error
                      print("No version found")
                      exit(1)
                  else:
                      # The pattern has up to 6 capturing groups, so we combine the ones that matched
                      # Groups 1-3 (for "version": (x, y, z)) or 4-6 (for version = (x, y, z))
                      groups = [g for g in match.groups() if g]
                      print(".".join(groups))
                  EOF
                  )
                  if [ -z "$VERSION" ]; then
                      echo "Error: Version could not be extracted from __init__.py"
                      exit 1
                  fi

                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: Validate version
              id: validate_version
              run: |
                  if [[ -z "${{ steps.extract_version.outputs.version }}" ]]; then
                    echo "Error: Extracted version is invalid."
                    exit 1
                  else
                    echo "Extracted version: ${{ steps.extract_version.outputs.version }}"
                  fi

            - name: Build addon
              uses: natapol2547/blender-addon-build@main
              with:
                  name: toon-shade
                  exclude-files: '.git;.github;README.md;library.blend1'

    Release:
        runs-on: ubuntu-latest
        needs: Build
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Release addon
              uses: natapol2547/blender-addon-release@main
              with:
                  artifact_name: toon-shade
                  version: ${{ needs.Build.outputs.version }}
                  release_stage: ${{ github.event.inputs.release_stage }}
                  addon_folder_name: toon_shade
